name: onboarding CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 도커 이미지 빌드
        run: ./gradlew bootBuildImage

      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR에 로그인
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker tag docker.io/library/example:0.0.1-SNAPSHOT $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Amazon ECR 로그아웃
        run: docker logout ${{ steps.ecr-login.outputs.registry }}

  CD:
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: SSH(원격 접속)로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.1.0
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          RDS_USER: ${{ secrets.RDS_USER }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_DBNAME: ${{ secrets.RDS_DBNAME }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          envs: ECR_REPOSITORY, IMAGE_TAG, AWS_ACCOUNT_ID, AWS_REGION, RDS_USER, RDS_PASSWORD, RDS_ENDPOINT, RDS_DBNAME, JWT_SECRET_KEY, REDIS_HOST
          script: |
            docker stop example || true
            docker rm example || true
            
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
            
            docker run -m 1g -d --name example -p 8080:8080 \
              -e RDS_USER=$RDS_USER \
              -e RDS_PASSWORD=$RDS_PASSWORD \
              -e RDS_ENDPOINT=$RDS_ENDPOINT \
              -e RDS_DBNAME=$RDS_DBNAME \
              -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
              -e REDIS_HOST=$REDIS_HOST \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG \